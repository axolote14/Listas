/*
 * Copyright (c) 2015 Rafael Baquero
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.baqsoft.listas.ui.edit;

import android.app.Fragment;
import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.widget.SimpleCursorAdapter;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Spinner;

import com.baqsoft.listas.R;
import com.baqsoft.listas.contentprovider.ListasContract;

public class EditItemFragment extends Fragment implements LoaderManager.LoaderCallbacks<Cursor> {
    SimpleCursorAdapter checklistSpinnerAdapter;
    Spinner mSpinner;
    EditText editTitle;
    EditText editNotes;
    long itemId;
    long checklistId;

    public EditItemFragment() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        // Get reference to views
        View view = inflater.inflate(R.layout.fragment_edit, container, false);
        editTitle = (EditText) view.findViewById(R.id.edit_title);
        editNotes = (EditText) view.findViewById(R.id.edit_notes);
        mSpinner = (Spinner) view.findViewById(R.id.lists_spinner);

        // Get the item id
        Bundle extras = getActivity().getIntent().getExtras();
        if(extras.getBoolean("edit")) {
            itemId = extras.getLong("dataId");
            String[] projection = {ListasContract.ItemContract.COLUMN_TITLE,
                    ListasContract.ItemContract.COLUMN_NOTE,
                    ListasContract.ItemContract.COLUMN_CHECKLIST_ID};
            String uriString = ListasContract.ItemContract.URI_STRING + "/" + itemId;
            Cursor data = getActivity().getContentResolver().query(Uri.parse(uriString), projection, null, null, null);
            data.moveToFirst();
            int titleIndex = data.getColumnIndex(ListasContract.ItemContract.COLUMN_TITLE);
            int noteIndex = data.getColumnIndex(ListasContract.ItemContract.COLUMN_NOTE);
            int checklistIndex = data.getColumnIndex(ListasContract.ItemContract.COLUMN_CHECKLIST_ID);
            editTitle.setText(data.getString(titleIndex));
            editNotes.setText(data.getString(noteIndex));
            checklistId = data.getLong(checklistIndex);
            data.close();
        }

        // Prepare the spinner
        String[] from = {ListasContract.CategoryContract.COLUMN_TITLE};
        int[] to = {android.R.id.text1};
        checklistSpinnerAdapter = new SimpleCursorAdapter(getActivity(),
                android.R.layout.simple_spinner_item, null, from, to, 0);
        checklistSpinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mSpinner.setAdapter(checklistSpinnerAdapter);

        // Launch category - checklist loader.
        getLoaderManager().initLoader(0, null, this);

        return view;
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
            // Spinner loader.
            String[] catCheckProjection
                    = {ListasContract.CatCheckContract.COLUMN_ID,
                    ListasContract.CatCheckContract.COLUMN_TITLE};
            return new CursorLoader(getActivity(),
                    Uri.parse(ListasContract.CatCheckContract.URI_STRING),
                    catCheckProjection, null, null, null);
//        }
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        // Find position of selected category - checklist.
        data.moveToFirst();
        int numRows = data.getCount();
        int position = 0;
        int idIndex = data.getColumnIndex(ListasContract.CatCheckContract.COLUMN_ID);
        for(int count = 0; count < numRows; count++) {
            data.moveToPosition(count);
            if(checklistId == data.getLong(idIndex)) {
                position = count;
                break;
            }
        }

        // Change cursor
        checklistSpinnerAdapter.changeCursor(data);

        // Move to position
        mSpinner.setSelection(position);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        checklistSpinnerAdapter.changeCursor(null);
    }
}
